class CircularQueue():

    def __init__(self, s):
        self.size = s
        self.queue = [None] * self.size
        self.front = self.rear = -1

    def enqueue(self, val):
        if self.isFull():
            print("The Circular queue is full\n")
        elif self.front == -1:
            self.front = 0
            self.rear = 0
            self.queue[self.rear] = val
        else:
            self.rear = (self.rear + 1) % self.size
            self.queue[self.rear] = val

    def dequeue(self):
        if self.isEmpty():
            print("The Circular queue is Empty\n")
        elif (self.front == self.rear):
            temp = self.queue[self.front]
            self.front = -1
            self.rear = -1
            return temp
        else:
            temp = self.queue[self.front]
            self.front = (self.front + 1) % self.size
            return temp
            
    def get_front(self):
        if self.isEmpty():
            print("The Circular queue is Empty\n")
        else:
            return self.queue[front]
        
    def isFull(self):
        return ((self.rear+1)%self.size)==self.front
    
    def isEmpty(self):
        return ((self.rear==self.front) or (self.front==-1))

    def minimum_value(self):
        if self.isEmpty():
            print("The Circular queue is Empty\n")
        elif self.rear >= self.front:
            min=self.queue[self.front]
            for i in range(self.front, self.rear + 1):
                if min>self.queue[i]:
                    min=self.queue[i]
        else:
            for i in range(self.front, self.size):
                if min>self.queue[i]:
                    min=self.queue[i]
            for i in range(0, self.rear + 1):
                if min>self.queue[i]:
                    min=self.queue[i]
        return min;
    
    def print_queue(self):
        if self.isEmpty():
            print("The Circular queue is Empty\n")
        elif self.rear >= self.front:
            for i in range(self.front, self.rear + 1):
                print(self.queue[i], end=" ")
        else:
            for i in range(self.front, self.size):
                print(self.queue[i], end=" ")
            for i in range(0, self.rear + 1):
                print(self.queue[i], end=" ")


obj = CircularQueue(5)
obj.enqueue(10)
obj.enqueue(2)
obj.enqueue(7)
obj.enqueue(11)
obj.enqueue(4)
print("Values in Circlar Queue: ")
obj.print_queue()

print("\nMinimum Value in Circular Queue is: ",obj.minimum_value())
